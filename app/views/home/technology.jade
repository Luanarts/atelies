append variables
  - title += "Tecnologia"
extends ../shared/baseBootstrap
append content
  section#app-container
    .container
      h1 Tecnologia
      #technology
        :markdown
          O Ateliês é feito com [NodeJS](http://nodejs.org/), e roda com um banco [MongoDB](http://www.mongodb.org/).
          O backend é feito com [ExpressJS](http://expressjs.com/) e o frontend com [BackboneJS](http://backbonejs.org/), ambos com diversos plugins.

          Os testes são feitos dentro do próprio Node, e são baseados em [Mocha](http://visionmedia.github.io/mocha/), [Chai](http://chaijs.com/) e [Sinon](http://sinonjs.org).
          Os testes de frontend, que testam código que roda no navegador, com o Backbone, também rodam no Node, com ajuda do [JSDOM](https://github.com/tmpvar/jsdom) e [algum setup](https://github.com/giggio/atelies/blob/master/public/javascripts/test/support/runnerSetup.coffee).
          Para testes de aceitação automatizados o [Selenium Webdriver](http://docs.seleniumhq.org/projects/webdriver/), na [sua encarnação NodeJS](https://code.google.com/p/selenium/wiki/WebDriverJs), é o responsável. Alguma coisa existe também com [ZombieJS](http://zombie.labnotes.org/), mas ele está sendo removido por sua incapacidade de lidar com o dinamismo do código de frontend, ficando com o DOM desatualizado com frequência.

          Todo o código é escrito com [CoffeeScript](http://coffeescript.org/), o que facilitou muito o desenvolvimento e deu uma velocidade muito maior do que seria possível com JavaScript somente.

          Todo o código frontend é amarrado com [RequireJS](http://requirejs.org/), o que deixa tudo absurdamente organizado.

          O [NPM](https://npmjs.org/) gerencia os pacotes de backend e o [Bower](http://bower.io/) gerencia os de frontend. O [Grunt](http://gruntjs.com/) organiza tudo e deixa todo o trabalho de desenvolvimento e instalação da aplicação mais fácil.

          A hospedagem de produção está no [AWS](http://aws.amazon.com/) da Amazon, via PaaS no [Elastic Beanstalk](http://aws.amazon.com/elasticbeanstalk/) com Node 0.10, e publicação via git push. O banco de dados está no [Mongolab](http://mongolab.com). O ambiente de staging está no [Heroku](http://heroku.com).

          O desenvolvimento é todo feito no Linux, no [VIM](http://www.vim.org/). Porque qualquer IDE é desnecessária quando o assunto é CoffeeScript (ou JavaScript). E porque [desenvolver com VIM te torna um desenvolvedor melhor](http://blog.lambda3.com.br/2013/09/isso-nao-e-intuitivo/). O Node roda direitinho no Windows, mas diversos pacotes do NPM que estão presentes no projeto ainda não estão rodando no Windows, dessa forma qualquer trabalho deve ser feito no Linux e rodar em um server Linux.

          O código é open-source, [GPL V2](https://github.com/giggio/atelies/blob/master/LICEN%C3%87A.txt), e está disponível no [Github](https://github.com/giggio/atelies). Isso para que quem quiser aprender a desenvolver uma aplicação com NodeJS e/ou Backbone possa aprender, e também para garantir à comunidade que o projeto não tem interesse comercial, e é da comunidade, não somente de quem o desenvolveu.
          Todo o planejamento futuro está online [nos issues](https://github.com/giggio/atelies/issues) do Github. Você pode ir lá ver o que já foi feito e se encontrar um bug abrir ele por lá. Ou no [UserVoice](https://atelies.uservoice.com).

          [![Powered by AWS Cloud Computing](http://awsmedia.s3.amazonaws.com/AWS_Logo_PoweredBy_127px.png)](http://aws.amazon.com/what-is-cloud-computing)
