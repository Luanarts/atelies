fs            = require 'fs'
{exec}        = require 'child_process'
path          = require 'path'
http          = require 'http'
child_process = require 'child_process'

iswin = process.platform is 'win32'
currDir = __dirname
if iswin and currDir.substring(0,2) is "\\\\"
  depTarget = process.env.DEPLOYMENT_TARGET
  currDir = depTarget
coffee = path.join currDir,  "node_modules", "coffee-script", "bin", "coffee"
coffee = "node #{coffee}" if iswin

compileDirectory = (dirPath) ->
  for dirItem in fs.readdirSync(dirPath)
    fullItemPath = path.join dirPath, dirItem
    continue unless fs.existsSync fullItemPath
    isDirectory =  fs.statSync(fullItemPath).isDirectory()
    if isDirectory
        compileDirectory fullItemPath
    else
      compileFile fullItemPath

isACoffeeFile = (file) -> file.indexOf(".coffee", file.length - 7) isnt -1

compileFile = (file) ->
  return unless isACoffeeFile file
  console.log "found file #{file}, compiling..."
  exec "#{coffee} --compile #{file}", (err, stdout, stderr) ->
    throw err if err

publicJSPath     = (file) -> path.join(currDir, 'public', 'javascripts', 'lib', file)
publicCSSPath    = (file) -> path.join(currDir, 'public', 'stylesheets', 'lib', file)
publicImagesPath = (file) -> path.join(currDir, 'public', 'images', 'lib', file)

downloadFileToJS = (remoteFile, fileName) ->
  fileName = path.basename remoteFile if fileName is undefined
  localFile = publicJSPath fileName
  downloadFile remoteFile, localFile

downloadFileToCSS = (remoteFile, fileName) ->
  fileName = path.basename remoteFile if fileName is undefined
  localFile = publicCSSPath fileName
  downloadFile remoteFile, localFile

downloadFileToImages = (remoteFile, fileName) ->
  fileName = path.basename remoteFile if fileName is undefined
  localFile = publicImagesPath fileName
  downloadFile remoteFile, localFile

downloadFile = (remoteFile, localFile) ->
  console.log "downloading file #{path.basename localFile}..."
  return if fs.existsSync localFile
  directory = path.dirname localFile
  fs.mkdirSync directory unless fs.existsSync directory
  file = fs.createWriteStream localFile
  request = http.get remoteFile, (response) -> response.pipe file

whenDone = (condition, callback) ->
  if condition()
    callback()
  else
    setTimeout((-> whenDone(condition, callback)), 1000)

task 'test', 'Build single application file from source files', (options) ->
  invoke 'dependencies:npmfull'
  invoke 'compile:coffee'
  invoke 'dependencies:js'
  whenDone (-> options.npmProcessInstallDone), -> invoke 'run:test'

task 'build', 'Build single application file from source files', ->
  invoke 'dependencies:npm'
  invoke 'compile:coffee'
  invoke 'dependencies:js'

task 'run:test', 'Runs the tests', (options) ->
  console.log 'Running tests via npm...'
  npmProcessTest = child_process.spawn 'npm', ['test'], { cwd: currDir, env: process.env }
  npmProcessTest.stdout.pipe process.stdout
  npmProcessTest.stderr.pipe process.stderr
  npmProcessTest.on 'exit', => options.npmProcessTestDone = on

task 'dependencies:npmfull', 'Run npm (full)', (options) ->
  console.log 'Installing npm packages (full)...'
  options.npmProcessInstallDone = off
  npmProcessInstall = child_process.spawn 'npm', ['install'], { cwd: currDir, env: process.env }
  npmProcessInstall.stdout.pipe process.stdout
  npmProcessInstall.stderr.pipe process.stderr
  npmProcessInstall.on 'exit', => options.npmProcessInstallDone = on

task 'dependencies:npm', 'Run npm (only production)', (options) ->
  console.log 'Installing npm packages (production)...'
  npmProcessInstall = child_process.spawn 'npm', ['install', '--production'], { cwd: currDir, env: process.env }
  npmProcessInstall.stdout.pipe process.stdout
  npmProcessInstall.stderr.pipe process.stderr
  npmProcessInstall.on 'exit', => options.npmProcessInstallDone = on

task 'compile:coffee', 'compiles CoffeeScript files', ->
  compileDirectory currDir

task 'dependencies:js', 'copies js dependencies to public/script', ->
  downloadFileToJS      "http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js"
  downloadFileToJS      "http://ajax.googleapis.com/ajax/libs/jqueryui/1.10.2/jquery-ui.min.js"
  downloadFileToJS      "http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.4.4/underscore-min.js"
  downloadFileToJS      "http://cdnjs.cloudflare.com/ajax/libs/backbone.js/1.0.0/backbone-min.js"
  downloadFileToCSS     "http://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/2.3.1/css/bootstrap.min.css"
  downloadFileToCSS     "http://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/2.3.1/css/bootstrap-responsive.min.css"
  downloadFileToJS      "http://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/2.3.1/js/bootstrap.min.js"
  downloadFileToCSS     "http://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/2.3.1/img/glyphicons-halflings-white.png", path.join("img", "glyphicons-halflings-white.png")
  downloadFileToCSS     "http://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/2.3.1/img/glyphicons-halflings.png", path.join("img", "glyphicons-halflings.png")
  downloadFileToJS      "http://cdnjs.cloudflare.com/ajax/libs/require.js/2.1.5/require.min.js"
  downloadFileToJS      "http://cdnjs.cloudflare.com/ajax/libs/require-text/2.0.5/text.js"
  downloadFileToJS      "http://cdnjs.cloudflare.com/ajax/libs/handlebars.js/1.0.0-rc.3/handlebars.min.js"
